<?php
// $Id$

/**
 * @file
 * A user interface for searching and browsing through multiple facets.
 */

require_once('./'. drupal_get_path('module', 'faceted_search') .'/faceted_search.inc');

// The current search.
$_faceted_search_ui_current_search = NULL;

/**
 * Implementation of hook_perm().
 */
function faceted_search_ui_perm() {
  return array('use faceted search');
}

/**
 * Implementation of hook_menu().
 */
function faceted_search_ui_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path' => 'faceted_search/results',
      'callback' => 'faceted_search_ui_stage_results',
      'access' => user_access('use faceted search'),
      'type' => MENU_CALLBACK,
    );
    $items[] = array(
      'path' => 'faceted_search/select',
      'callback' => 'faceted_search_ui_stage_select',
      'access' => user_access('use faceted search'),
      'type' => MENU_CALLBACK,
    );
    $items[] = array(
      'path' => 'faceted_search/facet',
      'callback' => 'faceted_search_ui_stage_facet',
      'access' => user_access('use faceted search'),
      'type' => MENU_CALLBACK,
    );
    $items[] = array(
      'path' => 'faceted_search/categories',
      'callback' => 'faceted_search_ui_stage_categories',
      'access' => user_access('use faceted search'),
      'type' => MENU_CALLBACK,
    );
  }
  else {
    _faceted_search_ui_init();
  }
  
  return $items;
}

/**
 * Implementation of hook_block().
 */
function faceted_search_ui_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks['current'] = array('info' => t('Faceted search / Current search'));
    $blocks['keyword'] = array('info' => t('Faceted search / Keyword search'));
    $blocks['guided'] = array('info' => t('Faceted search / Guided search'));
    $blocks['related'] = array('info' => t('Faceted search / Related categories'));
    $blocks['sort'] = array('info' => t('Faceted search / Sort options'));
    return $blocks;
  }
  elseif ($op == 'view' && user_access('use faceted search')) {
    global $_faceted_search_ui_current_search;

    faceted_search_ui_add_css();
    
    switch ($delta) {
      case 'current':
        $block['subject'] = t('Current search'); 
        $block['content'] = faceted_search_ui_show_current_search($_faceted_search_ui_current_search);
        break;

      case 'keyword':
        if ($_faceted_search_ui_current_search->ui_state['stage'] == 'results') {
          $block['subject'] = t('Keyword search'); 
          $block['content'] = faceted_search_ui_show_keyword_search($_faceted_search_ui_current_search);
        }
        break;

      case 'guided':
        if ($_faceted_search_ui_current_search->ui_state['stage'] == 'results') {
          $block['subject'] = t('Guided search');
          $block['content'] = faceted_search_ui_show_guided_search($_faceted_search_ui_current_search);
        }
        break;

      case 'related':
        if (arg(0) == 'node' && is_numeric(arg(1)) && !arg(2) && $node = node_load(arg(1))) {
          if ($content = faceted_search_ui_show_related_categories($node)) {
            $block['subject'] = t('Related categories'); 
            $block['content'] = $content;
          }
        }
        break;

      case 'sort':
        $block['content'] = faceted_search_ui_show_sort_options($_faceted_search_ui_current_search);
        break;
    }
    return $block;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function faceted_search_ui_form_alter($form_id, &$form) {
  if ($form_id == 'faceted_search_admin_settings_form') {
    $form['display']['faceted_search_ui_tooltips'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable tooltips'),
      '#description' => t('Check this option to have tooltips displayed with subcategories when hovering over a category in the guided search. This feature works only with clients that have Javascript enabled.'),
      '#default_value' => variable_get('faceted_search_ui_tooltips', TRUE),
    );
    $styles = faceted_search_ui_style_list();
    $options = array();
    foreach ($styles as $key => $style) {
      $options[$key] = $style->get_label();
    }
    $form['display']['faceted_search_ui_style'] = array(
      '#type' => 'select',
      '#title' => t('Display style for search results'),
      '#description' => t('When the <em>Extracts</em> option is selected, search results show extracts relevant to the search terms. With the <em>Teasers</em> option, search results use standard teasers. Other modules may provide additional display styles.'),
      '#options' => $options,
      '#default_value' => faceted_search_ui_get_style(),
    );
    $form['display']['faceted_search_ui_style_related_categories'] = array(
      '#type' => 'select',
      '#title' => t('Display style for the related categories block'),
      '#description' => t('Related categories may be grouped by facet (when a node uses more than one category per facet), or ungrouped (flat list of categories).'),
      '#options' => array(
        'list_ungrouped' => t('List - Ungrouped'),
        'list_grouped' => t('List - Grouped by facet'),
        'table' => t('Table - Grouped by facet'),
      ),
      '#default_value' => variable_get('faceted_search_ui_style_related_categories', 'list_ungrouped'),
    );
    $form['behavior'] = array(
      '#type' => 'fieldset',
      '#title' => t('Behavior'),
    );
    $form['behavior']['faceted_search_ui_keyword_search_behavior'] = array(
      '#type' => 'radios',
      '#title' => t('Default mode for keyword search'),
      '#description' => t("Choose the mode to select by default in keyword search. <em>New search</em> might be more intuitive to users not familiar with Faceted Search's interface since it behaves like most search engines."),
      '#default_value' => variable_get('faceted_search_ui_keyword_search_behavior', 'new'),
      '#options' => array('new' => t('New search'), 'refine' => t('Search within results')),
    );
    $form['behavior']['faceted_search_ui_start_page'] = array(
      '#type' => 'textfield',
      '#title' => t('Start page'),
      '#description' => t("Path to go to when the current search is cleared. Popular options are: <code>faceted_search/select</code> to go to Faceted Search's full search page, <code>faceted_search/results</code> to go to a results page that's based on the current display style, <code>&lt;front&gt;</code> to go to your site's front page."),
      '#default_value' => variable_get('faceted_search_ui_start_page', 'faceted_search/select'),
    );
    $form['buttons']['#weight'] = 5; // Keep the buttons at the bottom.
  }
}

/**
 * Implementation of hook_faceted_search_query_alter.
 *
 * Give the display style object an opportunity at altering the search
 * query. The style might, for example, require additional filtering or extra
 * fields.
 */
function faceted_search_ui_faceted_search_query_alter($search, &$query) {
  $styles = faceted_search_ui_style_list();
  $style = faceted_search_ui_get_style();
  if (method_exists($styles[$style], 'query_alter')) {
    $styles[$style]->query_alter($query);
  }
}

/**
 * Menu callback to show the current search results.
 */
function faceted_search_ui_stage_results() {
  global $_faceted_search_ui_current_search;

  faceted_search_ui_add_css();
    
  // Collect the search results.
  $_faceted_search_ui_current_search->execute();
  $results = faceted_search_ui_format_results($_faceted_search_ui_current_search);
    
  faceted_search_ui_set_title($_faceted_search_ui_current_search);
  $content = theme('faceted_search_ui_stage_results', $results);
  return theme('faceted_search_ui_page', $_faceted_search_ui_current_search, $content);
}

/**
 * Implementation of hook_faceted_search_ui_style_info().
 */
function faceted_search_ui_faceted_search_ui_style_info() {
  return array(
    'extracts' => new faceted_search_ui_extract_style,
    'teasers' => new faceted_search_ui_teaser_style,
  );
}

/**
 * Menu callback to display the search page.
 */
function faceted_search_ui_stage_select() {
  global $_faceted_search_ui_current_search;

  faceted_search_ui_add_css();
    
  // Build the search results, which are required to count nodes per category
  $_faceted_search_ui_current_search->execute();

  faceted_search_ui_set_title($_faceted_search_ui_current_search);

  $keyword_search_content = faceted_search_ui_show_keyword_search($_faceted_search_ui_current_search);
  $guided_search_content = faceted_search_ui_show_guided_search($_faceted_search_ui_current_search);
  if ($output = theme('faceted_search_ui_stage_select', $_faceted_search_ui_current_search, $keyword_search_content, $guided_search_content)) {
    return theme('faceted_search_ui_page', $_faceted_search_ui_current_search, $output);
  }
}

/**
 * Menu callback to display a facet's categories.
 */
function faceted_search_ui_stage_facet() {
  global $_faceted_search_ui_current_search;

  faceted_search_ui_add_css();
  faceted_search_ui_add_tooltips();
  
  // Build the search results, which are required to count nodes per category
  $_faceted_search_ui_current_search->execute();

  // Find what facet to show
  list($index, $facet) = $_faceted_search_ui_current_search->get_facet_by_id($_faceted_search_ui_current_search->ui_state['facet-key'], $_faceted_search_ui_current_search->ui_state['facet-id']);
  if (!isset($index) || !isset($facet)) {
    drupal_not_found();
    return;
  }

  faceted_search_ui_set_title($_faceted_search_ui_current_search);
  $categories = faceted_search_ui_build_categories($_faceted_search_ui_current_search, $index); // TODO: paging
  return theme('faceted_search_ui_stage_facet', $_faceted_search_ui_current_search, $index, $facet, $categories);
}

/**
 * Menu callback to display an HTML chunk with categories related to a given
 * facet (using AJAX).
 */
function faceted_search_ui_stage_categories() {
  global $_faceted_search_ui_current_search;

  // We are returning JavaScript, so tell the browser.
  drupal_set_header('Content-Type: text/javascript; charset=utf-8');
  
  // Build the search results, which are required to count nodes per category
  $_faceted_search_ui_current_search->execute();

  // Find what facet to show
  $found = FALSE;
  $facets = $_faceted_search_ui_current_search->get_facets();
  foreach ($facets as $index => $facet) {
    if ($facet->get_key() == $_faceted_search_ui_current_search->ui_state['facet-key'] && $facet->get_id() == $_faceted_search_ui_current_search->ui_state['facet-id']) {
      $found = TRUE;
      break; // Found
    }
  }
  if (!$found) {
    exit();
  }

  if ($facet->get_max_categories() > 0) {
    $max_count = $facet->get_max_categories();
  }
  else {
    $max_count = NULL; // No limit.
  }

  // Prepare the HTML chunk
  $categories = faceted_search_ui_build_categories($_faceted_search_ui_current_search, $index, 0, $max_count, FALSE);
  if (count($categories)) {
    $content = '<p>'. t('Subcategories:') .'</p>';
    $content .= theme('faceted_search_ui_categories', $facet, $categories, $_faceted_search_ui_current_search->ui_state['stage']);
  }
  else {
    $content = '<p>'. t('No subcategories.') .'</p>'; 
  }
  $content = theme('faceted_search_ui_facet_wrapper', $facet, 'categories', $content);

  // Output JSON data, with id to help client to cache the content.
  print drupal_to_js(
    array(
      'id' => $_faceted_search_ui_current_search->get_text(),
      'content' => $content,
    )
  );
  exit();
}

/**
 * Display the current search arguments.
 */
function faceted_search_ui_show_current_search($search) {
  if (!$search->get_text()) {
    return; // No current search
  }

  foreach ($search->get_facets() as $index => $facet) {
    if ($facet->is_active()) {
      $content = theme('faceted_search_ui_facet_heading', $search->ui_state, $search->get_facets(), $index, 'current');
      $output .= theme('faceted_search_ui_facet_wrapper', $facet, 'current', $content);
    }
  }
  
  return $output;
}

/**
 * Display the keyword search form.
 */
function faceted_search_ui_show_keyword_search($search) {
  return drupal_get_form('faceted_search_ui_form', $search);
}

/**
 * Display the faceted browser.
 */
function faceted_search_ui_show_guided_search($search) {
  faceted_search_ui_add_tooltips();
  
  $facet_content = array();
  foreach ($search->get_facets() as $index => $facet) {
    if ($facet->get_key() == 'keyword') {
      // Keyword "facets" are ignored in guided search.
      continue; 
    }

    if ($facet->get_max_categories() > 0) {
      $max_count = $facet->get_max_categories();
    }
    else {
      $max_count = NULL; // No limit.
    }
    
    $categories = faceted_search_ui_build_categories($search, $index, 0, $max_count);
    if (count($categories) > 0 || $facet->is_active()) {
      $content = theme('faceted_search_ui_facet_heading', $search->ui_state, $search->get_facets(), $index, 'guided');
      $content .= theme('faceted_search_ui_categories', $facet, $categories, $search->ui_state['stage']);
      $facet_content[] = theme('faceted_search_ui_facet_wrapper', $facet, 'guided', $content);
    }
  }
  return theme('faceted_search_ui_guided_search', $search, $facet_content);
}

/**
 * Display the facets related to the specified node.
 *
 * Facets with the same key and id are grouped under the same label (instead of
 * repeating the label).
 */
function faceted_search_ui_show_related_categories($node) {
  $excluded_types = array_filter(variable_get('faceted_search_excluded_types', array()));
  if (isset($excluded_types[$node->type])) {
    return; // This node type is not used in faceted searches.
  }

  $facets = faceted_search_collect_facets($node);

  // Organize facets so that those that have a common label are grouped together.
  $groups = array(); // All groups of facets.
  $index = -1; // Index of the current group of facets.
  $last_facet = '';
  foreach ($facets as $facet) {
    $current_facet = $facet->get_key() .'-'. $facet->get_id();
    if ($current_facet != $last_facet) {
      $index++; // Start a new group.
    }
    $groups[$index][] = $facet;
    $last_facet = $current_facet;
  }

  return theme('faceted_search_ui_related_categories_'. variable_get('faceted_search_ui_style_related_categories', 'list_ungrouped'), $node, $groups);
}

/**
 * Discover the available display styles by invoking
 * hook_faceted_search_ui_style_info().
 *
 * @return
 *   An associative array keyed on style id. The id contains the module's name
 *   to ensure it is globally unique. The value of each key is an array
 *   containing information about the style: 'label', 'callback', 'args'.
 *
 * @see faceted_search_ui_views_faceted_search_ui_style_info()
 */
function faceted_search_ui_style_list() {
  static $styles;
  if (!isset($styles)) {
    $styles = array();
    foreach (module_implements('faceted_search_ui_style_info') as $module) {
      $function = $module .'_faceted_search_ui_style_info';
      if ($module_styles = $function()) {
        foreach ($module_styles as $id => $style) {
          // Add each of the styles provided by the module to the global array,
          // prepending the style id with the module name.
          $styles[$module .':'. $id] = $style;
        }
      }
    }  
  }
  return $styles;
}

/**
 * Indicate how to present search results.
 *
 * @return Id of the style to use.
 */
function faceted_search_ui_get_style() {
  return variable_get('faceted_search_ui_style', 'faceted_search_ui:extracts');
}

/**
 * Display sort options.
 */
function faceted_search_ui_show_sort_options($search) {
  $ui_state = $search->ui_state;
  if ($ui_state['stage'] == 'facet') {
    list($index, $facet) = $search->get_facet_by_id($search->ui_state['facet-key'], $search->ui_state['facet-id']);
    $sort_options = $facet->get_sort_options();
    if (count($sort_options) > 1) {
      $sort_links = array();
      foreach ($sort_options as $option => $name) {
        $attributes = $search->ui_state['facet-sort'] == $option ? array('class' => 'active') : array();
        $ui_state['facet-sort'] = $option;
        $path = faceted_search_ui_build_path($ui_state, $search->get_text());
        $sort_links[] = l($name, $path, $attributes);
      }
      return theme('faceted_search_ui_sort_options', $sort_links);
    }
  }
}

/**
 * Sets the page title.
 */
function faceted_search_ui_set_title($search) {
  if ($search->get_text()) {
    $labels = array();
    foreach ($search->get_facets() as $facet) {
      if ($facet->is_active()) {
        $category = $facet->get_active_category();
        $labels[] = check_plain(strip_tags($category->get_label()));
      }
    }
    if ($labels) {
      drupal_set_title(t('Search: @terms', array('@terms' => implode(', ', $labels))));
      return;
    }
  }
  drupal_set_title(t('Search')); // Default title.
}

/**
 * Format the results of the specified search according to the current display
 * style.
 */
function faceted_search_ui_format_results($search) {
  $styles = faceted_search_ui_style_list();
  $style = faceted_search_ui_get_style();
  if (method_exists($styles[$style], 'format_results')) {
    return $styles[$style]->format_results($search);
  }
}
  
/**
 * Render the search form.
 */
function faceted_search_ui_form($search) {
  $form['basic']['keywords']['and'] = array(
    '#type' => 'textfield',
    '#title' => $search->ui_state['stage'] == 'select' ? t('With all of the words') : '',
    '#default_value' => '',
    '#size' => 20,
    '#maxlength' => 255,
  );
  $ui_state = $search->ui_state;
  $current_stage = $ui_state['stage'];
  if ($current_stage == 'select') {
    $form['advanced'] = array(
      '#type' => 'fieldset',
      '#title' => t('Advanced search'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#attributes' => array('class' => 'faceted-search-advanced'),
    );
    $form['advanced']['keywords']['phrase'] = array(
      '#type' => 'textfield',
      '#title' => t('With the exact phrase'),
      '#default_value' => '',
      '#size' => 20,
      '#maxlength' => 255,
    );
    $form['advanced']['keywords']['or'] = array(
      '#type' => 'textfield',
      '#title' => t('With at least one of the words'),
      '#default_value' => '',
      '#size' => 20,
      '#maxlength' => 255,
    );
    $form['advanced']['keywords']['not'] = array(
      '#type' => 'textfield',
      '#title' => t('Without the words'),
      '#default_value' => '',
      '#size' => 20,
      '#maxlength' => 255,
    );
  }
  if ($search->get_text() != '') {
    $form['text'] = array(
      '#type' => 'hidden',
      '#value' => $search->get_text(),
    );
    $form['refine'] = array(
      '#type' => 'radios',
      '#title' => '',
      '#default_value' => variable_get('faceted_search_ui_keyword_search_behavior', 'new'),
      '#options' => array('new' => t('New search'), 'refine' => t('Search within results')),
    );
  }
  $form['stage'] = array(
    '#type' => 'hidden',
    '#value' => $current_stage == 'select' ? 'results' : $current_stage,
  );
  $form['facet-key'] = array(
    '#type' => 'hidden',
    '#value' => $search->ui_state['facet-key'],
  );
  $form['facet-id'] = array(
    '#type' => 'hidden',
    '#value' => $search->ui_state['facet-id'],
  );
  $form['facet-sort'] = array(
    '#type' => 'hidden',
    '#value' => $search->ui_state['facet-sort'],
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );
  if ($current_stage == 'select') {
    if ($search->get_text()) {
      // Add a Back to results button if we're in faceted search's select page.
      $ui_state['stage'] = 'results';
      $path = faceted_search_ui_build_path($ui_state, $search->get_text());
      $form['go-results']['#value'] = l(t('Back to results'), $path);
    }
    elseif (variable_get('faceted_search_ui_start_page', 'faceted_search/select') != 'faceted_search/select') {
      // Add a Cancel button if there's a 'start page' other than faceted search's select page.
      $ui_state['stage'] = 'results';
      $path = faceted_search_ui_build_path($ui_state, $search->get_text());
      $form['go-results']['#value'] = l(t('Cancel'), $path);
    }
  }
  else {
    $ui_state['stage'] = 'select';
    $path = faceted_search_ui_build_path($ui_state, $search->get_text());
    $form['go-select']['#value'] = l(t('More options'), $path);
  }
  
  return $form;
}

/**
 * Process a search form submission.
 */
function faceted_search_ui_form_submit($form_id, $form_values) {
  // Based on node_search_validate() - BEGIN
  if ($form_values['and'] != '') {
    if (preg_match_all('/ ("[^"]+"|[^" ]+)/i', ' '. $form_values['and'], $matches)) {
      $new_text .= ' '. implode(' ', $matches[1]);
    }
  }
  if ($form_values['or'] != '') {
    if (preg_match_all('/ ("[^"]+"|[^" ]+)/i', ' '. $form_values['or'], $matches)) {
      $new_text .= ' '. implode(' OR ', $matches[1]);
    }
  }
  if ($form_values['not'] != '') {
    if (preg_match_all('/ ("[^"]+"|[^" ]+)/i', ' '. $form_values['not'], $matches)) {
      $new_text .= ' -'. implode(' -', $matches[1]);
    }
  }
  if ($form_values['phrase'] != '') {
    $new_text .= ' "'. str_replace('"', ' ', $form_values['phrase']) .'"';
  }
  // Based on node_search_validate() - END

  // Combine pre-exiting text with new one
  if ($form_values['refine'] == 'new') {
    $text = trim($new_text);
  }
  else {
    $text = trim($form_values['text'] . $new_text);
  }

  // Define resulting path. Note: $form_values has the same keys as the usual
  // $ui_state argument.
  return faceted_search_ui_build_path($form_values, $text);
}

/**
 * Build a search path with the specified components. If $text is not
 * specified, the search text path component is generated from $facets.
 */
function faceted_search_ui_build_path($ui_state, $text, $facets = array()) {
  if (!$text && $facets) {
    $text = faceted_search_build_text($facets);
  }
  
  if (!$text && $ui_state['stage'] == 'results') {
    // No search text, go to the start page.
    return variable_get('faceted_search_ui_start_page', 'faceted_search/select');
  }

  $facet = '';
  $facet_sort = '';
  if (($ui_state['stage'] == 'facet' || $ui_state['stage'] == 'categories') && $ui_state['facet-key'] && $ui_state['facet-id']) {
    $facet = "/{$ui_state['facet-key']}:{$ui_state['facet-id']}";

    if ($ui_state['stage'] == 'facet' && $ui_state['facet-sort']) {
      $facet_sort = "/${ui_state['facet-sort']}";
    }
    else {
      $facet_sort = '/-';
    }
  }

  return "faceted_search/{$ui_state['stage']}{$facet}{$facet_sort}/{$text}";
}

/**
 * Build the remover path for a given facet.
 *
 * @param $ui_state
 *   The current state of the user interface.
 *
 * @param $facets
 *   The facets to take into account in the remover's links.
 *
 * @param $index
 *   Index of the facet whose remover shall be built.
 */
function faceted_search_ui_build_remover_path($ui_state, $facets, $index) {
  // Remove current facet for remover.
  unset($facets[$index]); 
  // Switch to results stage.
  if ($ui_state['stage'] == 'select' || $ui_state['stage'] == 'facet') {
    $ui_state['stage'] = 'results';
  }
  return faceted_search_ui_build_path($ui_state, '', $facets);
}

/**
 * Build the breadcrumb of a facet according to its active path.
 *
 * @param $ui_state
 *   The current state of the user interface.
 *
 * @param $facets
 *   The facets to take into account in the breadcrumb's links.
 *
 * @param $index
 *   Index of the facet whose breadcrumb shall be built.
 *
 * @param $breadcrumb
 *   Array of initial components (or prefix components) of the breadcrumb, if
 *   any is desired.
 *
 * @param $context
 *   The caller's context (either 'guided', 'current', or 'related-categories').
 *
 * @return
 *   Array of breadcrumb components.
 */
function faceted_search_ui_build_breadcrumb($ui_state, $facets, $index, $breadcrumb = array(), $context = 'guided') {
  $facet = $facets[$index];
  if ($facet->is_active()) {
    // Replace the current facet with a clone for active category manipulations
    // (to avoid manipulating the original facet).
    $facets[$index] = drupal_clone($facet);
    
    $path = array();
    foreach ($facet->get_active_path() as $category_index => $category) {
      $path[] = $category;
      // Replace active category within the facet
      $facets[$index]->set_active_path($path);
      // Switch to results stage.
      if ($ui_state['stage'] == 'select') {
        $ui_state['stage'] = 'results';
      }
      $link = faceted_search_ui_build_path($ui_state, '', $facets);
      $breadcrumb[] = l($category->get_label(), $link);
    }
    if ($category && $context != 'related-categories') {
      // The last category needs not be a link to itself since it is already in
      // the current search.
      // Note: theme_faceted_search_keyword_or_label() uses <em> in the label.
      $breadcrumb[count($breadcrumb) - 1] = filter_xss($category->get_label(), array('em', 'strong')); 
    }
  }

  return $breadcrumb;
}

/**
 * Build the subcategory links of a facet.
 *
 * @param $search
 *   The search context.
 *
 * @param $index
 *   Index of the facet within the search context.
 *
 * @param $from
 *   Ordinal number of the first category to load. Numbering starts at 0.
 *
 * @param $max_count
 *   Number of categories to load.
 *
 * @param $links
 *   TRUE to generate category links, FALSE to generate text.
 */
function faceted_search_ui_build_categories($search, $index, $from = NULL, $max_count = NULL, $links = TRUE) {
  $facets = $search->get_facets();
  $facet = $facets[$index];
  $facet->set_sort($search->ui_state['facet-sort']);
  
  // Load the categories. If a limit is used, we load one extra category in
  // order to determine whether a 'more' link needs to be displayed.
  $categories = $search->load_categories($facet, $from, (isset($max_count) ? $max_count + 1 : $max_count));

  // Replace the facet with a clone to allow active category manipulations (to
  // avoid manipulating the original facet).
  $facets[$index] = drupal_clone($facet);

  $ui_state = $search->ui_state;
  $ui_state['stage'] = 'results';
  $ui_state['facet-key'] = '';
  $ui_state['facet-id'] = '';
  $ui_state['facet-sort'] = '';

  // Build links to categories.
  // TODO: Separate into alphabetical groups (with first letter of each category label), if configured to do so
  $items = array();
  foreach ($categories as $category_index => $category) {
    if (isset($max_count) && $category_index == $max_count) {
      break; // Do not theme the extra category.
    }
    if ($links) {
      $active_path = $facet->get_active_path();
      $active_path[] = $category;
      // Replace active path in the facet
      $facets[$index]->set_active_path($active_path);
      $path = faceted_search_ui_build_path($ui_state, '', $facets);
    }
    $items[] = theme('faceted_search_ui_category', $category, $path);
  }

  // Add the 'more...' link.
  if ($search->ui_state['stage'] != 'facet' && isset($max_count) && count($categories) > $max_count) {
    if ($links) {
      $ui_state['stage'] = 'facet';
      $ui_state['facet-key'] = $facet->get_key();
      $ui_state['facet-id'] = $facet->get_id();
      $ui_state['facet-sort'] = $facet->get_sort();
      $path = faceted_search_ui_build_path($ui_state, $search->get_text());
    }
    $items[] = theme('faceted_search_ui_more', $path);
  }
  
  return $items;
}

/**
 * Add the default stylesheet.
 */
function faceted_search_ui_add_css() {
  drupal_add_css(drupal_get_path('module', 'faceted_search') .'/faceted_search_ui.css');
}

/**
 * Add scripts for tooltips.
 */
function faceted_search_ui_add_tooltips() {
  // If tooltips are enabled, add the necessary scripts.
  if (variable_get('faceted_search_ui_tooltips', TRUE)) {
    $path = drupal_get_path('module', 'faceted_search');
    drupal_add_js($path .'/lib/dimensions/jquery.dimensions.pack.js');
    drupal_add_js($path .'/jquery.faceted_search_ui.js');
  }
}

/**
 * Provides the 'extracts' display style for search results.
 */
class faceted_search_ui_extract_style {

  /**
   * Return the name of this style.
   */
  function get_label() {
    return t('Extracts');
  }

  /**
   * Format the search results to display node extracts showing relevant
   * keywords.
   */
  function format_results($search) {
    drupal_add_css(drupal_get_path('module', 'search') .'/search.css');
    
    $found_items = $search->load_results(variable_get('default_nodes_main', 10));
      
    // Taken from node_search() (node.module 1.764) - BEGIN
    $results = array();
    foreach ($found_items as $item) {
      // Build the node body.
      $node = node_load($item->nid);
      $node = node_build_content($node, FALSE, FALSE);
      $node->body = drupal_render($node->content);

      // Fetch comments for snippet
      $node->body .= module_invoke('comment', 'nodeapi', $node, 'update index');
      // Fetch terms for snippet
      $node->body .= module_invoke('taxonomy', 'nodeapi', $node, 'update index');

      $extra = node_invoke_nodeapi($node, 'search result');
      $results[] = array(
        'link' => url('node/'. $item->nid, NULL, NULL, TRUE),
        'type' => node_get_types('name', $node),
        'title' => $node->title,
        'user' => theme('username', $node),
        'date' => $node->changed,
        'node' => $node,
        'extra' => $extra,
        'score' => $item->score,
        'snippet' => search_excerpt($search->get_keywords(), $node->body));
    }
    // Taken from node_search() - END
    
    return theme('search_page', $results, 'node');
  }
}

/**
 * Provides the 'teasers' display style for search results.
 */
class faceted_search_ui_teaser_style {

  /**
   * Return the name of this style.
   */
  function get_label() {
    return t('Teasers');
  }

  /**
   * Format the search results to display node teasers.
   */
  function format_results($search) {
    $limit = variable_get('default_nodes_main', 10);
    $found_items = $search->load_results($limit);
    
    foreach ($found_items as $item) {
      $output .= node_view(node_load($item->nid), TRUE);
    }      
    return $output . theme('pager', NULL, $limit);
  }
}

/**
 * Render a faceted search page.
 *
 * @param $search
 *   The search context.
 *
 * @param $content
 *   The page's content.
 */
function theme_faceted_search_ui_page($search, $content) {
  $classes = array(
    'faceted-search-page',
    'faceted-search-stage-'. $search->ui_state['stage'],
  );
  return '<div class="'. implode(' ', $classes) .'">'. $content .'</div>'."\n";
}

/**
 * Render a wrapper around a facet.
 *
 * @param $facet
 *   The facet object.
 *
 * @param $context
 *   The caller's context (either 'guided', 'current', 'related-categories', or
 *   'categories').
 *
 * @param $content
 *   The facet's content (heading, categories, etc.)
 */
function theme_faceted_search_ui_facet_wrapper($facet, $context, $content) {
  $classes = array(
    'faceted-search-facet', // Note: Tooltips rely on this class.
    'faceted-search-facet--'. check_plain($facet->get_key() .'--'. $facet->get_id()), // Note: Tooltips rely on this class.
    'faceted-search-facet-'. ($facet->is_active() && $context != 'related-categories' ? 'active' : 'inactive'),
    'faceted-search-'. $context,
  );
  return '<div class="'. implode(' ', $classes) .'">'. $content .'</div>'."\n";
}

/**
 * Render the facet identified by $index. This displays the facet's label,
 * active path, and active category.
 *
 * @param $context
 *   The caller's context (either 'guided', 'current', or 'related-categories').
 *
 * @param $show_label
 *   Determines whether to display the facet's label. True by default.
 */
function theme_faceted_search_ui_facet_heading($ui_state, $facets, $index, $context, $show_label = TRUE) {
  $facet = $facets[$index];
  $remover_path = faceted_search_ui_build_remover_path($ui_state, $facets, $index);
  
  if ($context == 'current') {
    $output .= theme('faceted_search_ui_remover_link_current_search', $remover_path) .' ';
  }

  // Render the facet's label (except for keyword facets).
  if ($show_label && $facet->get_key() != 'keyword') {
    $output .= theme('faceted_search_ui_facet_label', $facets, $index, $context);
    if ($facet->is_active()) {
      $output .= ': ';
    }
  }

  // Render path to the facet's active category.
  if ($facet->is_active()) {
    $breadcrumb = array();
    if ($context == 'guided') {
      $breadcrumb[] = theme('faceted_search_ui_remover_link_guided_search', $remover_path);
    }
    $breadcrumb = faceted_search_ui_build_breadcrumb($ui_state, $facets, $index, $breadcrumb, $context);
    $output .= theme('faceted_search_ui_breadcrumb', $breadcrumb);
  }

  return $output;
}

function theme_faceted_search_ui_categories($facet, $categories, $stage) {
  if (count($categories)) {
    switch ($stage) {
      case 'select':
      case 'categories':
        $column_count = 2;
        break;
      case 'facet':
        $column_count = 4;
        break;
      default:
        $column_count = 1;
    }
    if ($column_count > 1) {
      $columns = array_chunk($categories, ceil(count($categories) / $column_count));
      $row = array();
      for ($column_index = 0; $column_index < $column_count && $column_index < count($columns); $column_index++) {
        $row[] = theme('item_list', $columns[$column_index]);
      }
      // Ensure a consistent number of columns
      while ($column_index < $column_count) {
        $column_index++;
        $row[] = '';
      }
      return theme('table', array(), array($row), array('class' => 'faceted-search'));
    }
    else {
      return theme('item_list', $categories);
    }
  }
}

function theme_faceted_search_ui_facet_label($facets, $index, $label) {
  // Note: theme_faceted_search_keyword_or_label() uses <em> in the label.
  return '<h3>'. filter_xss($facets[$index]->get_label(), array('em', 'strong')) .'</h3>';
}

function theme_faceted_search_ui_category($category, $path) {
  // Note: Tooltips rely on class 'faceted-search-category'.
  return '<span class="faceted-search-category">'. ($path ? l($category->get_label(), $path) : check_plain($category->get_label())) .' ('. $category->get_count() .')</span>';
}

function theme_faceted_search_ui_more($path) {
  if ($path) {
    return l(t('more...'), $path, array('class' => 'faceted-search-more'));
  }
  else {
    return '<span class="faceted-search-more">'. t('more...') .'</span>';
  }
}

function theme_faceted_search_ui_remover_link_guided_search($path) {
  return l(t('all'), $path);
}

function theme_faceted_search_ui_remover_link_current_search($path) {
  // TODO: nice default icon instead of ndash
  return l('[&ndash;]', $path, array('title' => t('Remove this term')), NULL, NULL, FALSE, TRUE);
}

function theme_faceted_search_ui_breadcrumb($breadcrumb) {
  return implode(' &raquo; ', $breadcrumb);
}

function theme_faceted_search_ui_sort_options($options) {
  return '<p>'. t('Sort by: !options', array('!options' => implode(' | ', $options))) .'</p>';
}

function theme_faceted_search_ui_stage_results($results) {
  global $pager_total, $pager_total_items, $pager_page_array;
  if ($pager_total_items[0] > 0) {
    $limit = variable_get('default_nodes_main', 10);
    $from = $pager_page_array[0] * $limit + 1;
    $to = min(($pager_page_array[0] + 1) * $limit, $pager_total_items[0]);
    $total = $pager_total_items[0];
    
    if ($total == 1) {
      $numbering = t('1 result');
    }
    elseif ($from == $to) {
      $numbering = t('Result @to of @total', array('@to' => $to, '@total' => $total));
    }
    elseif ($total <= $limit) {
      $numbering = t('@total results', array('@total' => $pager_total_items[0]));
    }
    else {
      $numbering = t('Results @from - @to of @total', array('@from' => $from, '@to' => $to, '@total' => $total));
    }
    
    $numbering = '<div class="faceted-search-numbering">'. $numbering .'</div>';
    return $numbering . theme('box', t('Search results'), $results);
  }
  else {
    return theme('box', t('Your search yielded no results'), search_help('search#noresults'));
  }
}

function theme_faceted_search_ui_stage_select($search, $keyword_search_content, $guided_search_content) {
  if ($keyword_search_content) {
    $form['keyword'] = array(
      '#type' => 'fieldset',
      '#title' => t('Keyword search'),
      '#value' => $keyword_search_content,
      '#weight' => 0,
      '#attributes' => array('class' => 'faceted-search-keyword'),
    );
  }
  if ($guided_search_content) {
    $form['guided'] = array(
      '#type' => 'fieldset',
      '#title' => t('Guided search'),
      '#value' => $guided_search_content,
      '#weight' => 1,
      '#attributes' => array('class' => 'faceted-search-guided'),
    );
  }
  return drupal_render($form);
}

function theme_faceted_search_ui_stage_facet($search, $index, $facet, $categories) {
  $content .= '<p>'. ($search->get_text() ? t('Click a term to refine your current search.') : t('Click a term to initiate a search.')) .'</p>';
  $content .= theme('faceted_search_ui_facet_heading', $search->ui_state, $search->get_facets(), $index, 'guided');
  $content .= theme('faceted_search_ui_categories', $facet, $categories, $search->ui_state['stage']);
  $content = theme('faceted_search_ui_facet_wrapper', $facet, 'guided', $content);
  return theme('faceted_search_ui_page', $search, $content);
}

/**
 * Renders a set of facets.
 *
 * @param $search
 *   The search context.
 *
 * @param $facets
 *   Array of individually rendered facets.
 */
function theme_faceted_search_ui_guided_search($search, $facets) {
  if (count($facets)) {
    $output .= '<p>'. ($search->get_text() ? t('Click a term to refine your current search.') : t('Click a term to initiate a search.')) .'</p>';
    if ($search->ui_state['stage'] == 'select') {
      // Show facets in two columns in stage 'select'.
      $column_count = 2;
      $columns = array_chunk($facets, ceil(count($facets) / $column_count));
      $row = array();
      for ($column_index = 0; $column_index < $column_count && $column_index < count($columns); $column_index++) {
        $row[] = implode('', $columns[$column_index]);
      }
      // Ensure a consistent number of columns
      while ($column_index < $column_count) {
        $column_index++;
        $row[] = '';
      }
      $output .= theme('table', array(), array($row), array('class' => 'faceted-search'));
    }
    else {
      // In other stages, just concat all the facets.
      $output .= implode('', $facets);
    }
  }
  return $output;
}

/**
 * Display a list of facets related to a node in a list.
 *
 * @param $node
 *   The node whose related categories are being themed.
 *
 * @param $groups
 *   Groups of facets, where facets within a group have a common label.
 */
function theme_faceted_search_ui_related_categories_list_ungrouped($node, $groups) {
  $output = '';
  foreach ($groups as $group) {
    foreach ($group as $facet) {
      $rendered_facet = theme('faceted_search_ui_facet_heading', _faceted_search_ui_defaults(), array($facet), 0, 'related-categories');
      $output .= theme('faceted_search_ui_facet_wrapper', $facet, 'related-categories', $rendered_facet);
    }
  }
  return $output;
}

/**
 * Display a list of facets related to a node in a list, with categories grouped by facet.
 *
 * @param $node
 *   The node whose related categories are being themed.
 *
 * @param $groups
 *   Groups of facets, where facets within a group have a common label.
 */
function theme_faceted_search_ui_related_categories_list_grouped($node, $groups) {
  $output = '';
  foreach ($groups as $group) {
    $first = TRUE;
    foreach ($group as $facet) {
      if ($first) {
        $rendered_facets = array(); // Start a new group.
        $label = theme('faceted_search_ui_facet_label', array($facet), 0, 'related-categories');
      }
      $rendered_facets[] = theme('faceted_search_ui_facet_heading', _faceted_search_ui_defaults(), array($facet), 0, 'related-categories', FALSE);
      $first = FALSE;
    }
    $output .= theme('faceted_search_ui_facet_wrapper', $facet, 'related-categories', $label . theme('item_list', $rendered_facets));
  }
  return $output;
}


/**
 * Display a list of facets related to a node in a table.
 *
 * @param $node
 *   The node whose related categories are being themed.
 *
 * @param $groups
 *   Groups of facets, where facets within a group have a common label.
 */
function theme_faceted_search_ui_related_categories_table($node, $groups) {
  $items = array();
  foreach ($groups as $group) {
    $first = TRUE;
    foreach ($group as $facet) {
      $rendered_facet = theme('faceted_search_ui_facet_heading', _faceted_search_ui_defaults(), array($facet), 0, 'related-categories', FALSE);
      $rendered_facet = theme('faceted_search_ui_facet_wrapper', $facet, 'related-categories', $rendered_facet);
      if ($first) {
        // Output a row with two cells: the label and the first facet of the group.
        $label = theme('faceted_search_ui_facet_label', array($facet), 0, 'related-categories');
        $label = theme('faceted_search_ui_facet_wrapper', $facet, 'related-categories', $label);
        $items[] = array( // Row.
          'data' => array(
            array( // 1st cell.
              'data' => $label,
              'rowspan' => count($group)), 
            $rendered_facet, // 2nd cell.
          ),
          'class' => 'faceted-search-first', // Mark the first row of a group.
        );
      }
      else {
        // Output a row with a single cell containing the facet.
        $items[] = array( // Row.
          'data' => array(
            $rendered_facet // 1st (and only) cell.
          ),
          'class' => 'faceted-search-next',
        );
      }
      $first = FALSE;
    }
  }
  return theme('table', array(), $items, array('class' => 'faceted-search'));
}

// --------------------------------------------------------------------------
// Internal stuff

/**
 * Initialize the UI's current search.
 *
 * The faceted search UI uses paths of the following form:
 *
 * faceted_search/stage/key:id/facet-sort/text
 *
 * Meaning of each path component:
 *
 * 'stage' represents one of the possible states of the UI in the search
 * process. Possible values and their meanings are:
 *
 *   'results' shows results alongside the faceted search UI.
 *
 *   'select' shows the faceted search UI.
 *
 *   'facet' shows subcategories in their own dedicated page.
 *
 *   'categories' shows an HTML chunk with subcategories.
 *
 * 'key:id' specifies the facet class and facet id to show. Only present in the
 * 'facet' and 'categories' stages.
 *
 * 'facet-sort' specifies the sort criteria to use when listing the facet's
 * categories. Only present in the 'facet' and 'categories' stages. Only used in
 * the 'facet' stage.
 *
 * 'text' specifies the actual search text.
 */
function _faceted_search_ui_init() {
  global $_faceted_search_ui_current_search;
  
  // We have to consider form values at this point, because we need an
  // initialized search object before anything else tries to use it.
  if (isset($_POST['form_id']) && $_POST['form_id'] == 'faceted-search-ui-form') {
    $form = TRUE;
    $form_stage = $_POST['stage'];
    $form_text = $_POST['text'];
    $form_facet_key = $_POST['facet-key'];
    $form_facet_id = $_POST['facet-id'];
    $form_facet_sort = $_POST['facet-sort'];
  }
  
  // Set defaults.
  $ui_state = _faceted_search_ui_defaults();
  $text = '';

  // Validate and assign search options.
  if ($form || arg(0) == 'faceted_search') {
    // Extract the stage.
    $input_stage = $form ? $form_stage : arg(1);
    switch ($input_stage) {
      case 'results':
      case 'select':
        $ui_state['stage'] = $input_stage;
        $arg_count = 3;
        break;
      case 'facet':
      case 'categories':
        $arg_count = 5;
        $facet = explode(':', arg(2));
        $input_facet_key = $form ? $form_facet_key : $facet[0];
        $input_facet_id = $form ? $form_facet_id : $facet[1];
        $input_facet_sort = $form ? $form_facet_sort : arg(3);
        if ($input_facet_key && $input_facet_id) {
          $ui_state['stage'] = $input_stage;
          $ui_state['facet-key'] = $input_facet_key;
          $ui_state['facet-id'] = $input_facet_id;
          $ui_state['facet-sort'] = $input_facet_sort;
        }
        break;
    }

    // Extract the search text.
    // Note: We avoid using arg() here because '/' might be used in the search
    // text. We need to explode the query up to the search text argument.
    $args = explode('/', $_GET['q'], $arg_count);
    $text = trim($form ? $form_text : $args[$arg_count - 1]);
  }
  
  // Create the current search.
  $_faceted_search_ui_current_search = new faceted_search($text);

  // Attach UI data to the current search.
  $_faceted_search_ui_current_search->ui_state = $ui_state;

  if ($text && $ui_state['stage'] == 'results') {
    $path = faceted_search_ui_build_path($ui_state, $text);
    // Log the search text.
    watchdog('faceted_search', t('%text.', array('%text' => $text)), WATCHDOG_NOTICE, l(t('results'), $path));
    // TODO: Logging for statistics
  }
}

/**
 * Return the values representing the user interface's default state.
 */
function _faceted_search_ui_defaults() {
  return array(
    'stage' => 'results',
    'facet-key' => '',
    'facet-id' => '',
    'facet-sort' => '',
  );
}

