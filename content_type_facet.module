<?php
// $Id$

/**
 * @file
 * Provides a facet for content types.
 */

require_once('./'. drupal_get_path('module', 'faceted_search') .'/faceted_search.inc');

/**
 * Implementation of hook_menu().
 */
function content_type_facet_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/faceted_search/content_type_facet',
      'title' => t('Content Type Facet'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('content_type_facet_admin_settings_form'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_LOCAL_TASK,
    );
  }
  
  return $items;
}

/**
 * Implementation of hook_faceted_search_list().
 */
function content_type_facet_faceted_search_list() {
  return new content_type_facet();
}

/**
 * Implementation of hook_faceted_search_parse().
 *
 * Scan the given search text for a 'content_type:name' token, and extract a
 * facet from it.
 *
 * @param &$text
 *   Text to parse. Once the desired token has been extracted, it is removed
 *   from the text.
 *
 * @return
 *   Array of facets to include in the current search.
 */
function content_type_facet_faceted_search_parse(&$text) {
  $types = content_type_facet_get_types();
  $facets = array();
  if ($type = search_query_extract($text, 'content_type')) {
    // Create an active facet with the type found in search text
    if (isset($types[$type])) {
      $facets[] = new content_type_facet($type);
    }
    // Remove the parsed text
    $text = search_query_insert($text, 'content_type');
  }
  return $facets;
}

/**
 * Implementation of hook_faceted_search_collect().
 *
 * Return a facet based on the specified node's type. The returned facet will
 * have an active category reflecting the node's type.
 *
 * @return
 *   Array of facets.
 */
function content_type_facet_faceted_search_collect($node) {
  $types = content_type_facet_get_types();
  $facets = array();
  if (isset($types[$node->type])) {
    $facets[] = new content_type_facet($node->type);
  }
  return $facets;
}

/**
 * Menu callback for the administration settings.
 */
function content_type_facet_admin_settings_form() {
  $types = node_get_types('names');
  if (count($types)) {
    $form['content_type_facet_types'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Content types to display in the Content type facet'),
      '#description' => t('Check the content types that shall be displayed in the Content type facet. Note that this setting is not a filter for search results; other content types can still be searchable through other facets or from text searches.'),
      '#options' => $types,
      '#default_value' => content_type_facet_get_types(),
    );
  }
  else {
    $form['message'] = array(
      '#value' => '<p>'. t('There are currently no content types. Go to the !page first to create content types.', array('!page' => l(t('Content types page'), 'admin/content/types'))) .'</p>',
    );
  }
  return system_settings_form($form);
}

/**
 * Return an array of all node types that have been enabled for use in faceted
 * searches.
 */
function content_type_facet_get_types() {
  // Intersecting with node_get_types() ensures that only types that still exist
  // are returned.
  return array_filter(array_intersect(variable_get('content_type_facet_types', array()), array_keys(node_get_types())));
}

/**
 * A node-type based facet. 
 */
class content_type_facet extends faceted_search_facet {

  /**
   * Constructor. Optionally assigns the active type of the facet.
   */
  function content_type_facet($type = NULL) {
    $active_path = array();
    if ($type) {
      $active_path[] = new content_type_facet_category($type, node_get_types('name', $type));
    }
    parent::faceted_search_facet('content_type', $active_path);
  }

  function get_id() {
    return 1; // This module provides only one facet
  }

  function get_label() {
    return t('Content type');
  }

  /**
   * Returns the available sort options for this facet.
   */
  function get_sort_options() {
    $options = parent::get_sort_options();
    $options['type'] = t('Type');
    return $options;
  }

  /**
   * Handler for the 'count' sort criteria.
   */
  function build_sort_query_count(&$query) {
    $query->add_orderby('count', 'DESC');
    $query->add_orderby('node_type_name', 'ASC');
  }

  /**
   * Handler for the 'type' sort criteria.
   */
  function build_sort_query_type(&$query) {
    $query->add_orderby('node_type_name', 'ASC');
  }

  /**
   * Return the search text for this facet, taking into account this facet's
   * active path.
   */
  function get_text() {
    if ($category = $this->get_active_category()) {
      return $category->_type;
    }
    return '';
  }

  /**
   * Updates a query for retrieving the root categories of this facet and their
   * associated nodes within the current search results. 
   *
   * @param $query
   *   The query object to update.
   *
   * @return
   *   FALSE if this facet can't have root categories.
   */
  function build_root_categories_query(&$query) {
    $query->add_table('node_type', 'type', 'n', 'type');
    $query->add_field('node_type', 'type');
    $query->add_field('node_type', 'name');
    $query->add_where("node_type.type IN ('". implode("', '", content_type_facet_get_types()) ."')");
    $query->add_groupby('node_type_type');
    return TRUE;
  }

  /**
   * This factory method creates categories given query results that include the
   * fields selected in get_root_categories_query() or get_subcategories_query().
   *
   * @param $results
   *   $results A database query result resource.
   *
   * @return
   *   Array of categories.
   */
  function build_categories($results) {
    $categories = array();
    while ($result = db_fetch_object($results)) {
      $categories[] = new content_type_facet_category($result->node_type_type, $result->node_type_name, $result->count);
    }
    return $categories;
  }
}

/**
 * A node-type based facet category.
 */
class content_type_facet_category extends faceted_search_category {
  var $_type = NULL;
  var $_name = '';

  /**
   * Constructor.
   */
  function content_type_facet_category($type, $name, $count = NULL) {
    parent::faceted_search_category($count);
    $this->_type = $type;
    $this->_name = $name;
  }

  /**
   * Return the label of this category.
   */
  function get_label() {
    return $this->_name;
  }

  /**
   * Updates a query for selecting nodes matching this category.
   *
   * @param $query
   *   The query object to update.
   */
  function build_results_query(&$query) {
    $query->add_where("n.type = '%s'", $this->_type);
  }  
}